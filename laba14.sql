CREATE TABLE SAMPLE_TABLE
(
    X NUMERIC(3,0) GENERATED ALWAYS AS IDENTITY,
    Y VARCHAR2(15),
    Z VARCHAR2(20),
    PRIMARY KEY(X),
    CONSTRAINT LOL_Z CHECK(Z LIKE '%N%')
)

DROP TABLE SAMPLE_TABLE CASCADE CONSTRAINTS;

DROP VIEW SAMPLE_VIEW;
SET SERVEROUTPUT ON;

INSERT INTO SAMPLE_TABLE(Y,Z) VALUES ('O','N');
INSERT INTO SAMPLE_TABLE(Y,Z) VALUES ('OO','NN');
INSERT INTO SAMPLE_TABLE(Y,Z) VALUES ('OOO','NNN');
INSERT INTO SAMPLE_TABLE(Y,Z) VALUES ('OOOO','NNNN');
INSERT INTO SAMPLE_TABLE(Y,Z) VALUES ('OOOOO','NNNNN');
INSERT INTO SAMPLE_TABLE(Y,Z) VALUES ('OOOOOO','NNNNNN');
INSERT INTO SAMPLE_TABLE(Y,Z) VALUES ('OOOOOOO','NNNNNNN');
INSERT INTO SAMPLE_TABLE(Y,Z) VALUES ('OOOOOOOO','NNNNNNNN');
INSERT INTO SAMPLE_TABLE(Y,Z) VALUES ('OOOOOOOOO','NNNNNNNNN');
INSERT INTO SAMPLE_TABLE(Y,Z) VALUES ('OOOOOOOOOO','NNNNNNNNNN');
COMMIT;

SELECT * FROM SAMPLE_TABLE;

CREATE OR REPLACE TRIGGER BEFORE_OPERATION_SAMPLE_TABLE
BEFORE INSERT OR UPDATE OR DELETE ON SAMPLE_TABLE
BEGIN
    DBMS_OUTPUT.PUT_LINE('BEFORE_OPERATION_SAMPLE_TABLE TRIGGERED ON SAMPLE_TABLE');
END;

UPDATE SAMPLE_TABLE SET Y = '0' WHERE Y='O';
INSERT INTO SAMPLE_TABLE(Y,Z) VALUES ('OOOOOOOOOOO','NNNNNNNNNNN');
DELETE SAMPLE_TABLE WHERE Y = 'OOOOOOOOOOO';
COMMIT;
SELECT * FROM SAMPLE_TABLE;

CREATE OR REPLACE TRIGGER BEFORE_FOR_EACH_ROW_SAMPLE_TABLE
BEFORE INSERT OR UPDATE OR DELETE ON SAMPLE_TABLE
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('BEFORE_FOR_EACH_ROW_SAMPLE_TABLE TRIGGERED ON SAMPLE_TABLE');
END;

UPDATE SAMPLE_TABLE SET Y = 'O' WHERE Y='0';
INSERT INTO SAMPLE_TABLE(Y,Z) VALUES ('OOOOOOOOOOO','NNNNNNNNNNN');
INSERT INTO SAMPLE_TABLE(Y,Z) VALUES ('OOOOOOOOOOOO','NNNNNNNNNNNN');
DELETE SAMPLE_TABLE WHERE Y = 'OOOOOOOOOOO' OR Y = 'OOOOOOOOOOOO';
COMMIT

SELECT * FROM SAMPLE_TABLE;

CREATE OR REPLACE TRIGGER BEFORE_OPERATING_SAMPLE_TABLE
BEFORE INSERT OR UPDATE OR DELETE ON SAMPLE_TABLE
BEGIN
    IF UPDATING THEN
        DBMS_OUTPUT.PUT_LINE('BEFORE_OPERATION_SAMPLE_TABLE TRIGGERED ON UPDATE ON SAMPLE_TABLE');
    ELSIF INSERTING THEN
        DBMS_OUTPUT.PUT_LINE('BEFORE_OPERATION_SAMPLE_TABLE TRIGGERED ON INSERT ON SAMPLE_TABLE');    
    ELSE 
        DBMS_OUTPUT.PUT_LINE('BEFORE_OPERATION_SAMPLE_TABLE TRIGGERED ON DELETE ON SAMPLE_TABLE');    
    END IF;
END;

UPDATE SAMPLE_TABLE SET Y = '0' WHERE Y='O';
INSERT INTO SAMPLE_TABLE(Y,Z) VALUES ('OOOOOOOOOOO','NNNNNNNNNNN');
DELETE SAMPLE_TABLE WHERE Y = 'OOOOOOOOOOO';
COMMIT;

SELECT * FROM SAMPLE_TABLE;

CREATE OR REPLACE TRIGGER AFTER_OPERATION_SAMPLE_TABLE
AFTER INSERT OR UPDATE OR DELETE ON SAMPLE_TABLE
BEGIN
    DBMS_OUTPUT.PUT_LINE('AFTER_OPERATION_SAMPLE_TABLE TRIGGERED ON SAMPLE_TABLE');
END;

UPDATE SAMPLE_TABLE SET Y = 'O' WHERE Y='0';
INSERT INTO SAMPLE_TABLE(Y,Z) VALUES ('OOOOOOOOOOO','NNNNNNNNNNN');
DELETE SAMPLE_TABLE WHERE Y = 'OOOOOOOOOOO';
COMMIT;
SELECT * FROM SAMPLE_TABLE;

CREATE OR REPLACE TRIGGER AFTER_FOR_EACH_ROW_SAMPLE_TABLE
AFTER INSERT OR UPDATE OR DELETE ON SAMPLE_TABLE
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('AFTER_FOR_EACH_ROW_SAMPLE_TABLE TRIGGERED ON SAMPLE_TABLE');
END;

UPDATE SAMPLE_TABLE SET Y = '0' WHERE Y='O';
INSERT INTO SAMPLE_TABLE(Y,Z) VALUES ('OOOOOOOOOOO','NNNNNNNNNNN');
INSERT INTO SAMPLE_TABLE(Y,Z) VALUES ('OOOOOOOOOOOO','NNNNNNNNNNNN');
DELETE SAMPLE_TABLE WHERE Y = 'OOOOOOOOOOO' OR Y = 'OOOOOOOOOOOO';
COMMIT;
SELECT * FROM SAMPLE_TABLE;

CREATE TABLE LOGGING_TABLE
(
    ID numeric(10,0) GENERATED ALWAYS AS IDENTITY,
    DoneON date NOT NULL,
    WhatWasDone varchar(6) NOT NULL,
    TriggerName varchar(30) NOT NULL,
    PRIMARY KEY (ID)
);

CREATE OR REPLACE TRIGGER BEFORE_OPERATING_SAMPLE_TABLE
BEFORE INSERT OR UPDATE OR DELETE ON SAMPLE_TABLE
BEGIN
    IF UPDATING THEN
        INSERT INTO LOGGING_TABLE(DoneON,WhatWasDone,TriggerName) VALUES (SYSDATE,'UPDATE','BEFORE_OPERATING_SAMPLE_TABLE');
    ELSIF INSERTING THEN
        INSERT INTO LOGGING_TABLE(DoneON,WhatWasDone,TriggerName) VALUES (SYSDATE,'INSERT','BEFORE_OPERATING_SAMPLE_TABLE');
    ELSE 
        INSERT INTO LOGGING_TABLE(DoneON,WhatWasDone,TriggerName) VALUES (SYSDATE,'DELETE','BEFORE_OPERATING_SAMPLE_TABLE');
    END IF;
END;

CREATE OR REPLACE TRIGGER AFTER_OPERATION_SAMPLE_TABLE
AFTER INSERT OR UPDATE OR DELETE ON SAMPLE_TABLE
BEGIN
    IF UPDATING THEN
        INSERT INTO LOGGING_TABLE(DoneON,WhatWasDone,TriggerName) VALUES (SYSDATE,'UPDATE','AFTER_OPERATION_SAMPLE_TABLE');
    ELSIF INSERTING THEN
        INSERT INTO LOGGING_TABLE(DoneON,WhatWasDone,TriggerName) VALUES (SYSDATE,'INSERT','AFTER_OPERATION_SAMPLE_TABLE');
    ELSE 
        INSERT INTO LOGGING_TABLE(DoneON,WhatWasDone,TriggerName) VALUES (SYSDATE,'DELETE','AFTER_OPERATION_SAMPLE_TABLE');
    END IF;
END;

UPDATE SAMPLE_TABLE SET Y = 'O' WHERE Y='0';
INSERT INTO SAMPLE_TABLE(Y,Z) VALUES ('OOOOOOOOOOO','NNNNNNNNNNN');
DELETE SAMPLE_TABLE WHERE Y = 'OOOOOOOOOOO';
COMMIT;
SELECT * FROM SAMPLE_TABLE;
SELECT * FROM LOGGING_TABLE;

INSERT INTO SAMPLE_TABLE(Y,Z) VALUES ('19E803E','LOL');

DROP TABLE SAMPLE_TABLE;
DROP TRIGGER SAMPLE_CANNOT_BE_DELETED;

CREATE OR REPLACE TRIGGER SAMPLE_CANNOT_BE_DELETED
    BEFORE DROP ON SCHEMA
    BEGIN
        IF ORA_DICT_OBJ_NAME = 'SAMPLE_TABLE'
            THEN RAISE_APPLICATION_ERROR(-22222, 'Unable to DROP SAMPLE_TABLE');
        END IF;
    END;
    
DROP TABLE SAMPLE_TABLE;

DROP TABLE LOGGING_TABLE;

SELECT * FROM USER_TRIGGERS;

CREATE OR REPLACE TRIGGER BEFORE_OPERATING_SAMPLE_TABLE
BEFORE INSERT OR UPDATE OR DELETE ON SAMPLE_TABLE
FOR EACH ROW
BEGIN
    IF UPDATING THEN
        DBMS_OUTPUT.PUT_LINE(SYSDATE || 'UPDATE' || 'BEFORE_OPERATING_SAMPLE_TABLE');
    ELSIF INSERTING THEN
        DBMS_OUTPUT.PUT_LINE(SYSDATE || 'INSERT' || 'BEFORE_OPERATING_SAMPLE_TABLE');
    ELSE 
        DBMS_OUTPUT.PUT_LINE(SYSDATE || 'DELETE' || 'BEFORE_OPERATING_SAMPLE_TABLE');
    END IF;
END;

CREATE OR REPLACE TRIGGER AFTER_OPERATION_SAMPLE_TABLE
AFTER INSERT OR UPDATE OR DELETE ON SAMPLE_TABLE
FOR EACH ROW
BEGIN
    IF UPDATING THEN
        DBMS_OUTPUT.PUT_LINE(SYSDATE || 'UPDATE' || 'AFTER_OPERATION_SAMPLE_TABLE');
    ELSIF INSERTING THEN
        DBMS_OUTPUT.PUT_LINE(SYSDATE || 'INSERT' || 'AFTER_OPERATION_SAMPLE_TABLE');
    ELSE 
        DBMS_OUTPUT.PUT_LINE(SYSDATE || 'DELETE' || 'AFTER_OPERATION_SAMPLE_TABLE');
    END IF;
END;

UPDATE SAMPLE_TABLE SET Y = 'O' WHERE Y='0';
INSERT INTO SAMPLE_TABLE(Y,Z) VALUES ('OOOOOOOOOOO','NNNNNNNNNNN');
INSERT INTO SAMPLE_TABLE(Y,Z) VALUES ('OOOOOOOOOOOO','NNNNNNNNNNNN');
DELETE SAMPLE_TABLE WHERE Y = 'OOOOOOOOOOO' OR Y = 'OOOOOOOOOOOO';
COMMIT;

CREATE VIEW SAMPLE_VIEW AS SELECT * FROM SAMPLE_TABLE;

CREATE OR REPLACE TRIGGER VIEW_INSTEAD_OF
INSTEAD OF UPDATE ON SAMPLE_VIEW
FOR EACH ROW
BEGIN
    INSERT INTO SAMPLE_TABLE(Y, Z) VALUES (:NEW.Y, :NEW.Z);
    UPDATE SAMPLE_TABLE
    SET Y = 'Недейств.'
    WHERE X = :NEW.X; 
END;

UPDATE SAMPLE_VIEW SET Y = 'TEST4' WHERE X = 10;
INSERT INTO SAMPLE_VIEW(Y,Z) VALUES ('OOOOOOOOOOO','NNNNNNNNNNN');
SELECT * FROM SAMPLE_VIEW;
SELECT * FROM SAMPLE_TABLE;

CREATE OR REPLACE TRIGGER trigger1
BEFORE INSERT ON SAMPLE_TABLE
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Trigger 1 executed');
END;

CREATE OR REPLACE TRIGGER trigger2
BEFORE INSERT ON SAMPLE_TABLE
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Trigger 2 executed');
END;

CREATE OR REPLACE TRIGGER trigger3
BEFORE INSERT ON SAMPLE_TABLE
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Trigger 3 executed');
END;

INSERT INTO SAMPLE_TABLE (Y, Z) VALUES ('Example', 'N');

CREATE OR REPLACE TRIGGER trigger1
BEFORE INSERT ON SAMPLE_TABLE
FOR EACH ROW
FOLLOWS trigger3
BEGIN
    DBMS_OUTPUT.PUT_LINE('Trigger 1 executed');
END;

CREATE OR REPLACE TRIGGER trigger2
BEFORE INSERT ON SAMPLE_TABLE
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Trigger 2 executed');
END;

CREATE OR REPLACE TRIGGER trigger3
BEFORE INSERT ON SAMPLE_TABLE
FOR EACH ROW
FOLLOWS trigger2
BEGIN
    DBMS_OUTPUT.PUT_LINE('Trigger 3 executed');
END;